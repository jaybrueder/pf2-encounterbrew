package party

import (
    "fmt"
    "strconv"

    "pf2.encounterbrew.com/internal/models"

    _ "github.com/a-h/templ"
)

func playerValue(player *models.Player, defaultValue string, getValue func(*models.Player) string) string {
    if player != nil {
        return getValue(player)
    }
    return defaultValue
}

templ PlayerForm(index int, player *models.Player) {
    <div
        x-data="{
            confirmDelete() {
                if (confirm('Are you sure you want to delete this player?')) {
                    this.$refs.deleteButton.click();
                }
            }
        }"
        class="bg-white p-6 rounded-lg border border-gray-200 shadow-sm relative group mb-4"
        id={fmt.Sprintf("player-%d", index)}
    >
        <input
            type="hidden"
            name="players[]id"
            value={playerValue(player, "0", func(p *models.Player) string { return strconv.Itoa(p.ID) })}
        />

        // Player Header with Remove Button
        <div class="flex justify-between items-center mb-6">
            <h4 class="text-lg font-medium text-gray-900">
                if player != nil && player.Name != "" {
                    {player.Name}
                } else {
                    New Player
                }
            </h4>
            <button
                type="button"
                @click.stop="confirmDelete();"
                class="text-red-600 hover:text-red-800 transition-colors duration-200"
                title="Remove player"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
                </svg>
            </button>

            if player != nil {
                <button
                    x-ref="deleteButton"
                    hx-delete={fmt.Sprintf("/parties/%d/%d", player.PartyID, player.ID)}
                    hx-target="body"
                    class="hidden"
                ></button>
            } else {
                <button
                    x-ref="deleteButton"
                    @click={fmt.Sprintf("document.getElementById('player-%d').remove()", index)}
                    class="hidden"
                ></button>
            }
        </div>

        // Basic Info Section
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div>
                <label for={fmt.Sprintf("player-name-%d", index)} class="block text-sm font-medium text-gray-700 mb-1">
                    Character Name
                </label>
                <input
                    type="text"
                    id={fmt.Sprintf("player-name-%d", index)}
                    name="players[]name"
                    value={playerValue(player, "", func(p *models.Player) string { return p.Name })}
                    class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                    required
                    placeholder="Enter character name"
                />
            </div>

            <div>
                <label for={fmt.Sprintf("player-level-%d", index)} class="block text-sm font-medium text-gray-700 mb-1">
                    Level
                </label>
                <input
                    type="number"
                    id={fmt.Sprintf("player-level-%d", index)}
                    name="players[]level"
                    value={playerValue(player, "1", func(p *models.Player) string { return strconv.Itoa(p.Level) })}
                    min="1"
                    max="20"
                    class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                    required
                />
            </div>
        </div>
        // Defense Stats Section
        <div class="mb-4">
            <h5 class="text-sm font-medium text-gray-700 mb-3">Defense Stats</h5>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                <div>
                    <label for={fmt.Sprintf("player-ac-%d", index)} class="block text-sm text-gray-600 mb-1">AC</label>
                    <input
                        type="number"
                        id={fmt.Sprintf("player-ac-%d", index)}
                        name="players[]ac"
                        value={playerValue(player, "10", func(p *models.Player) string { return strconv.Itoa(p.Ac) })}
                        min="1"
                        class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                        required
                    />
                </div>

                <div>
                    <label for={fmt.Sprintf("player-hp-%d", index)} class="block text-sm text-gray-600 mb-1">HP</label>
                    <input
                        type="number"
                        id={fmt.Sprintf("player-hp-%d", index)}
                        name="players[]hp"
                        value={playerValue(player, "8", func(p *models.Player) string { return strconv.Itoa(p.Hp) })}
                        min="1"
                        class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                        required
                    />
                </div>

                <div>
                    <label for={fmt.Sprintf("player-perception-%d", index)} class="block text-sm text-gray-600 mb-1">Perception</label>
                    <input
                        type="number"
                        id={fmt.Sprintf("player-perception-%d", index)}
                        name="players[]perception"
                        value={playerValue(player, "0", func(p *models.Player) string { return strconv.Itoa(p.Perception) })}
                        class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                        required
                    />
                </div>
            </div>
        </div>

        // Saving Throws Section
        <div>
            <h5 class="text-sm font-medium text-gray-700 mb-3">Saving Throws</h5>
            <div class="grid grid-cols-3 gap-4">
                <div>
                    <label for={fmt.Sprintf("player-fort-%d", index)} class="block text-sm text-gray-600 mb-1">Fortitude</label>
                    <input
                        type="number"
                        id={fmt.Sprintf("player-fort-%d", index)}
                        name="players[]fort"
                        value={playerValue(player, "0", func(p *models.Player) string { return strconv.Itoa(p.Fort) })}
                        class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                        required
                    />
                </div>

                <div>
                    <label for={fmt.Sprintf("player-ref-%d", index)} class="block text-sm text-gray-600 mb-1">Reflex</label>
                    <input
                        type="number"
                        id={fmt.Sprintf("player-ref-%d", index)}
                        name="players[]ref"
                        value={playerValue(player, "0", func(p *models.Player) string { return strconv.Itoa(p.Ref) })}
                        class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                        required
                    />
                </div>

                <div>
                    <label for={fmt.Sprintf("player-will-%d", index)} class="block text-sm text-gray-600 mb-1">Will</label>
                    <input
                        type="number"
                        id={fmt.Sprintf("player-will-%d", index)}
                        name="players[]will"
                        value={playerValue(player, "0", func(p *models.Player) string { return strconv.Itoa(p.Will) })}
                        class="w-full rounded-md border border-gray-300 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 shadow-sm"
                        required
                    />
                </div>
            </div>
        </div>
    </div>
}
