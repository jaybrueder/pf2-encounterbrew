package web

import (
    "strconv"

    "pf2.encounterbrew.com/internal/models"

    _ "github.com/a-h/templ"
)

templ EncounterList(encounters []models.Encounter) {
	@Base("Encounters") {
	    <section class="max-w-4xl p-6 mx-auto">
            for _, encounter := range encounters {
      		@Encounter(encounter)
            }
        </section>
	}
}

templ EncounterShow(encounter models.Encounter) {
    @Base(encounter.Name) {
        <section class="max-w-4xl p-6 mx-auto">
            @Difficulty(encounter)
            <div id="combatants">
                @CombatantList(encounter)
            </div>
        </section>
    }
}

templ EncounterEdit(encounter models.Encounter) {
    @Base(encounter.Name) {
        <section class="max-w-4xl p-6 mx-auto">
            <h2 class="text-lg font-semibold text-gray-700 capitalize">Edit { encounter.Name }</h2>

            <form hx-patch={"/encounters/" + strconv.Itoa(encounter.ID)} hx-target="body">
                <!--div class="grid grid-cols-1 gap-6 mt-4">
                    <div>
                        <label class="text-gray-700" for="name">Encounter name</label>
                        <input id="name" name="name" type="text" value={templ.EscapeString(encounter.Name)} autocomplete="off" class="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:ring-blue-300 focus:ring-opacity-40 focus:outline-none focus:ring">
                    </div>
                </div-->

                <div class="grid grid-cols-1 gap-6 mt-4">
                    <label class="text-gray-700" for="username">Monsters</label>
                    <div id="monsters-added">
                        @MonstersAdded(encounter)
                    </div>
                </div>

                <div class="grid grid-cols-1 gap-6 mt-4">
                    <div>
                        <label class="text-gray-700" for="username">Add new monsters</label>
                        <input
                            id="search"
                            name="search"
                            type="text"
                            placeholder="Search monster..."
                            autocomplete="off"
                            hx-post={"/encounters/" + strconv.Itoa(encounter.ID) + "/search_monsters"}
                            hx-trigger="input changed delay:500ms, search"
                            hx-target="#search-results"
                            hx-swap="innerHTML"
                            class="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:ring-blue-300 focus:ring-opacity-40 focus:outline-none focus:ring">
                    </div>
                    <div id="search-results">
                    </div>
                </div>

                <div class="flex justify-end mt-6">

                    <button hx-get={"/encounters/" + strconv.Itoa(encounter.ID)} hx-target="body" type="submit" class="flex items-center px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-600 rounded-lg hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80">
                        <i class="fa-solid fa-play"></i>
                        <span class="mx-2">Play</span>
                    </button>

                </div>
            </form>
        </section>
    }
}

templ MonsterSearchResults(encounterID string, monsters []models.Monster) {
    <div id="monster-search-results">
        if len(monsters) == 0 {
            <p>No monsters found.</p>
        } else {
            for _, monster := range monsters {
                @Monster(encounterID, &monster, false)
            }
        }
    </div>
}

templ MonstersAdded(encounter models.Encounter) {
    <div id="monster-added-list">
        if len(encounter.Monsters) == 0 {
            <p>No monsters added so far.</p>
        } else {
            for _, monster := range encounter.Monsters {
                @Monster(strconv.Itoa(encounter.ID), monster, true)
            }
        }
    </div>
}

templ Monster(encounterID string, monster *models.Monster, isAdded bool) {
    <div class="flex justify-between w-full overflow-hidden bg-white rounded-md mb-2">
        <div class="flex items-center justify-center w-12 bg-red-500">
            if isAdded {
                <span class="text-white font-semibold">{strconv.Itoa(monster.Count)}</span>
            }
        </div>

        <div class="px-4 py-2 -mx-3">
            <div class="mx-3">
                <span class="font-semibold text-sm text-gray-700">{monster.Data.Name}</span>
                <p class="text-xs text-gray-400">{monster.Data.System.Details.Publication.Title}</p>
            </div>
        </div>

        if isAdded {
            <div id="right" class="ml-auto flex items-center pr-2">
                <button hx-post={"/encounters/" + encounterID + "/remove_monster/" + strconv.Itoa(monster.ID)} hx-target="#monsters-added" class="text-4xl font-medium uppercase text-red-700 mt-1"><i class="fa-solid fa-square-minus"></i></button>
            </div>
        } else {
            <div id="right" class="ml-auto flex items-center pr-2">
                <button hx-post={"/encounters/" + encounterID + "/add_monster/" + strconv.Itoa(monster.ID)} hx-target="#monsters-added" class="text-4xl font-medium uppercase text-green-700 mt-1"><i class="fa-solid fa-square-plus"></i></button>
            </div>
        }
    </div>
}

templ Encounter(encounter models.Encounter) {
    <div class="flex justify-between w-full overflow-hidden bg-white rounded-md mb-2">
        <div class="flex items-center justify-center w-12 bg-blue-500">
            <span class="text-white font-semibold">?</span>
        </div>

        <div class="px-4 py-2 -mx-3">
            <div class="mx-3">
                <span class="font-semibold text-sm text-gray-700">{encounter.Name}</span>
                <p class="text-xs text-gray-400">{strconv.Itoa(encounter.ID)}</p>
            </div>
        </div>

        <div id="right" class="ml-auto flex items-center pr-2">
            <button hx-get={"/encounters/" + strconv.Itoa(encounter.ID) + "/edit"} hx-target="body" class="text-4xl font-medium uppercase text-gray-700 mt-1"><i class="fa-solid fa-square-pen"></i></button>
        </div>
    </div>
}

templ CombatantList(encounter models.Encounter) {
    <div id="combatants-list">
        if len(encounter.Combatants) == 0 {
            <p>No combatants.</p>
        } else {
            for i, combatant := range encounter.Combatants {
                @Combatant(combatant, i, encounter.ID)
            }
        }
    </div>
}

templ Combatant(combatant models.Combatant, index int, encounterID int) {
    <div x-data="{ isOpen: false }" class={ "flex justify-left w-full overflow-hidden bg-white rounded-md mb-2", setInactive(combatant) }>
        <button @click="isOpen = true" class={ "flex items-center justify-center w-12", getColorClass(combatant) }>
            <span class="text-white font-semibold">{strconv.Itoa(combatant.GetInitiative())}</span>
        </button>

        @EditCombatantModal(combatant, index, encounterID)

        <div class="px-4 py-2 -mx-3">
            <div class="mx-3">
                <span class="font-semibold text-sm text-gray-700">{combatant.GetName()}</span>
                <p class="text-xs text-gray-400">
                    <span><i class="fa-regular fa-heart"></i> <b>{strconv.Itoa(combatant.GetHp())}</b>/{strconv.Itoa(combatant.GetMaxHp())}</span>
                    <span class="mx-2"><i class="fa-solid fa-shield-halved"></i> {strconv.Itoa(combatant.GetAc())}</span>
                </p>
            </div>
        </div>
    </div>
}

templ EditCombatantModal(combatant models.Combatant, index int, encounterID int) {
    <div x-show="isOpen"
        x-transition:enter="transition duration-300 ease-out"
        x-transition:enter-start="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave="transition duration-150 ease-in"
        x-transition:leave-start="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave-end="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        class="fixed inset-0 z-10 overflow-y-auto"
        aria-labelledby="modal-title" role="dialog" aria-modal="true"
    >

        <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="relative inline-block px-4 pt-5 pb-4 overflow-hidden text-left align-bottom transition-all transform border-solid border-2 bg-white rounded-md shadow-md sm:my-8 sm:w-full sm:max-w-sm sm:p-6 sm:align-middle">
                <h3 class="text-lg font-medium leading-6 text-gray-800 capitalize" id="modal-title">
                    Edit <b>{combatant.GetName()}</b>
                </h3>

                <form class="mt-4" hx-patch={"/encounters/" + strconv.Itoa(encounterID) + "/combatant/" + strconv.Itoa(index) + "/update"} hx-target="#combatants">

                    <div>
                        <label for="initiative" class="text-sm text-gray-700">
                            Initiative
                        </label>

                        <div class="block mt-3">
                            <input type="number" name="initiative" id="initiative" value={strconv.Itoa(combatant.GetInitiative())} class="block w-full px-4 py-3 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                        </div>
                    </div>

                    <div>
                        <label for="damage" class="text-sm text-gray-700">
                            Damage
                        </label>

                        <div class="block mt-3">
                            <input type="number" name="damage" id="damage" value="0" class="block w-full px-4 py-3 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                        </div>
                    </div>

                    <div class="mt-4 sm:flex sm:items-center sm:-mx-2">
                        <button type="button" @click="isOpen = false" class="w-full px-4 py-2 text-sm font-medium tracking-wide text-gray-700 capitalize transition-colors duration-300 transform border border-gray-200 rounded-md sm:w-1/2 sm:mx-2 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-gray-300 focus:ring-opacity-40">
                            Cancel
                        </button>

                        <button type="submit" class="w-full px-4 py-2 mt-3 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-700 rounded-md sm:mt-0 sm:w-1/2 sm:mx-2 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>

    </div>
}

templ Difficulty(encounter models.Encounter) {
    <div id="difficulty" class={ "flex mb-2 p-1 justify-center rounded-md", getDifficultyClass(encounter.GetDifficulty())}>
        <p class="text-xs">{ getDifficultyText(encounter.GetDifficulty()) }</p>
    </div>
}

func getColorClass(combatant models.Combatant) string {
    switch combatant.GetType() {
    case "player":
        return "bg-green-700"
    case "monster":
        return "bg-red-700"
    default:
        return "bg-gray-500"
    }
}

func setInactive(combatant models.Combatant) string {
    if combatant.GetHp() <= 0 {
        return "opacity-50"
    }

    return ""
}

func getDifficultyClass(value int) string {
   	switch {
        case value == 0:
            return "bg-green-100 text-green-800"
        case value == 1:
            return "bg-blue-100 text-blue-800"
        case value == 2:
            return "bg-yellow-100 text-yellow-800"
        case value == 3:
            return "bg-orange-100 text-orange-800"
        case value == 4:
            return "bg-red-100 text-red-800"
    }

    return "bg-gray-100 text-gray-800"
}

func getDifficultyText(value int) string {
   	switch {
		case value == 0:
			return "Trivial (50 XP)"
		case value == 1:
			return "Low (60 XP)"
		case value == 2:
			return "Moderate (80 XP)"
		case value == 3:
			return "Severe (120 XP)"
		case value == 4:
			return "Extreme (160 XP)"
	}

	return "Unknown"
}
