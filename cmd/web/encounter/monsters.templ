package encounter

import (
    "strconv"

    "pf2.encounterbrew.com/internal/models"
    // "pf2.encounterbrew.com/internal/utils"

    _ "github.com/a-h/templ"
)

templ MonstersModal(encounter models.Encounter) {
	<div x-show="isMonstersOpen"
        x-transition
        class="fixed inset-0 flex items-center justify-center bg-black/50"
        style="z-index: 50;"
        aria-labelledby="modal-title" role="dialog" aria-modal="true"
    >

        <div @click.outside="isMonstersOpen = false"
        	class="p-4 m-2 text-sm bg-white font-normal text-left border-solid border-4 border-red-900 rounded-lg shadow-lg max-w-4xl max-h-[80vh] overflow-y-auto">
            <h3 class="text-lg font-medium leading-6 text-gray-800 capitalize" id="modal-title">
                <b>Add Monsters</b>
            </h3>

       	    <form hx-patch={"/encounters/" + strconv.Itoa(encounter.ID)} hx-target="body">
		        <div class="grid grid-cols-1 gap-6 mt-4">
		            <div id="monsters-added">
		                @MonstersAdded(encounter)
		            </div>
		        </div>

		        <div class="grid grid-cols-1 gap-6 mt-4">
		            <div>
		                <input
		                    id="search"
		                    name="search"
		                    type="text"
		                    placeholder="Search monsters..."
		                    autocomplete="off"
		                    hx-post={"/encounters/" + strconv.Itoa(encounter.ID) + "/search_monsters"}
		                    hx-trigger="input changed delay:500ms, search"
		                    hx-target="#search-results"
		                    hx-swap="innerHTML"
		                    class="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:ring-blue-300 focus:ring-opacity-40 focus:outline-none focus:ring">
		            </div>
		            <div id="search-results">
		            </div>
		        </div>
			</form>

			<div class="mt-4 sm:flex sm:items-center sm:-mx-2">
             <button type="button" @click="isMonstersOpen = false" class="w-full px-4 py-2 text-sm font-medium tracking-wide text-gray-700 capitalize transition-colors duration-300 transform border border-gray-200 rounded-md sm:w-1/2 sm:mx-2 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-gray-300 focus:ring-opacity-40">
                Cancel
             </button>

             <button hx-get={"/encounters/" + strconv.Itoa(encounter.ID) + "/refresh"} hx-target="body" type="button" class="w-full px-4 py-2 mt-3 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-700 rounded-md sm:mt-0 sm:w-1/2 sm:mx-2 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                Save
             </button>
         </div>
        </div>
    </div>
}

templ MonsterSearchResults(encounterID string, monsters []models.Monster) {
    <div id="monster-search-results">
        if len(monsters) == 0 {
            <p>No monsters found.</p>
        } else {
            for _, monster := range monsters {
                @MonsterListItem(encounterID, &monster, false)
            }
        }
    </div>
}

templ MonstersAdded(encounter models.Encounter) {
    <div id="monster-added-list">
        if len(encounter.Monsters) == 0 {
            <p>No monsters added so far.</p>
        } else {
            for _, monster := range encounter.Monsters {
                @MonsterListItem(strconv.Itoa(encounter.ID), monster, true)
            }
        }
    </div>
}

templ MonsterListItem(encounterID string, monster *models.Monster, isAdded bool) {
    <div class="flex justify-between w-full overflow-hidden bg-white rounded-md mb-2">
        <div class="flex items-center justify-center w-12 bg-red-900">
            <span class="text-white font-semibold">{strconv.Itoa(monster.GetLevel())}</span>
        </div>

        <div class="flex-1 px-4 py-2">
            <div>
                <span class="font-semibold uppercase text-xs text-gray-700">{monster.GetName()}</span>
                <p class="text-xs text-gray-400">{monster.Data.System.Details.Publication.Title}</p>
            </div>
        </div>

        if isAdded {
            <div id="right" class="ml-auto flex items-center pr-2">
                <button hx-post={"/encounters/" + encounterID + "/remove_monster/" + strconv.Itoa(monster.AssociationID)} hx-target="#monsters-added" class="text-4xl font-medium uppercase text-red-700 mt-1"><i class="fa-solid fa-square-minus"></i></button>
            </div>
        } else {
            <form class="flex justify-between"
                hx-post={"/encounters/" + encounterID + "/add_monster/" + strconv.Itoa(monster.ID)}
                hx-target="#monsters-added">

                <div class="flex py-2">
                    <input
                    type="number"
                    name="level_adjustment"
                    id="level_adjustment"
                    autocomplete="off"
                    value="0"
                    class="block w-8 mr-2 text-xs text-center text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                </div>

                <div id="right" class="ml-auto flex items-center pr-2">
                    <button type="submit" class="text-4xl font-medium uppercase text-green-700 mt-1">
                        <i class="fa-solid fa-square-plus"></i>
                    </button>
                </div>
            </form>
        }
    </div>
}
