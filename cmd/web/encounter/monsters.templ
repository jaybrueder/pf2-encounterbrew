package encounter

import (
    "strconv"

    "pf2.encounterbrew.com/internal/models"
    // "pf2.encounterbrew.com/internal/utils"

    _ "github.com/a-h/templ"
)

templ MonstersModal(encounter models.Encounter) {
	<div x-show="isMonstersOpen"
        x-transition
        x-data="monsterSearchFilters"
        data-encounter-id={strconv.Itoa(encounter.ID)}
        class="fixed inset-0 flex items-center justify-center bg-black/50 z-50"
        aria-labelledby="modal-title" role="dialog" aria-modal="true"
    >

        <div @click.outside="isMonstersOpen = false"
        	class="p-4 m-2 text-sm bg-white font-normal text-left border-solid border-4 border-red-900 rounded-lg shadow-lg max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium leading-6 text-gray-800 capitalize" id="modal-title">
                    <b>Add Monsters</b>
                </h3>
                if encounter.Party != nil {
                    <span class="text-sm text-gray-600">Party Level: <b>{strconv.FormatFloat(encounter.Party.GetLevel(), 'f', 1, 64)}</b></span>
                }
            </div>

       	    <form hx-patch={"/encounters/" + strconv.Itoa(encounter.ID)} hx-target="body" class="flex flex-col flex-1 min-h-0">
		        <div class="mb-4 flex-shrink-0">
		            <div id="monsters-added">
		                @MonstersAdded(encounter)
		            </div>
		        </div>

		        <div class="flex flex-col flex-1 min-h-0 overflow-y-auto">
		            <div class="space-y-4 p-1">
		            <div>
		                <input
		                    id="search"
		                    name="search"
		                    type="text"
		                    placeholder="Search monsters..."
		                    autocomplete="off"
		                    hx-post={"/encounters/" + strconv.Itoa(encounter.ID) + "/search_monsters"}
		                    hx-trigger="input changed delay:500ms, search"
		                    hx-target="#search-results"
		                    hx-swap="innerHTML"
		                    hx-include="[name^='min_level'], [name^='max_level'], [name^='excluded_']"
		                    class="block w-full px-4 py-2 text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:ring-blue-300 focus:ring-opacity-40 focus:outline-none focus:ring">
		            </div>

		            <!-- Filter Toggle Button -->
		            <button type="button" @click="showFilters = !showFilters" class="text-sm text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-2">
		                <span x-text="showFilters ? 'Hide' : 'Show'">Show</span> Filters
		                <i class="fas fa-chevron-down transition-transform" :class="showFilters ? 'rotate-180' : ''"></i>
		            </button>

		            <!-- Advanced Filters Section -->
		            <div x-show="showFilters" x-transition x-cloak class="bg-gray-50 p-4 rounded-lg space-y-4">
		                <!-- Level Range Filter -->
		                <div>
		                    <label class="block text-sm font-medium text-gray-700 mb-2">Level Range</label>
		                    <div class="flex gap-2 items-center">
		                        <input
		                            type="number"
		                            name="min_level"
		                            x-model="filters.minLevel"
		                            min="-1"
		                            max="30"
		                            placeholder="Min"
		                            @change="triggerSearch()"
		                            class="w-20 px-2 py-1 text-sm border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none">
		                        <span class="text-gray-500">to</span>
		                        <input
		                            type="number"
		                            name="max_level"
		                            x-model="filters.maxLevel"
		                            min="-1"
		                            max="30"
		                            placeholder="Max"
		                            @change="triggerSearch()"
		                            class="w-20 px-2 py-1 text-sm border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none">
		                    </div>
		                </div>

		                <!-- Size Exclusion Filter -->
		                <div>
		                    <label class="block text-sm font-medium text-gray-700 mb-2">Exclude Sizes</label>
		                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-2">
		                        <template x-for="size in ['tiny', 'small', 'medium', 'large', 'huge', 'gargantuan']" :key="size">
		                            <label class="flex items-center space-x-2 text-sm">
		                                <input
		                                    type="checkbox"
		                                    :name="'excluded_sizes[]'"
		                                    :value="size"
		                                    x-model="filters.excludedSizes"
		                                    @change="triggerSearch()"
		                                    class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
		                                <span x-text="size.charAt(0).toUpperCase() + size.slice(1)"></span>
		                            </label>
		                        </template>
		                    </div>
		                </div>

		                <!-- Source Exclusion Filter -->
		                <div>
		                    <label class="block text-sm font-medium text-gray-700 mb-2">Exclude Sources</label>
		                    <div class="text-xs text-gray-500 mb-2">Common sources - check to exclude</div>
		                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 max-h-32 overflow-y-auto">
		                        <template x-for="source in commonSources" :key="source">
		                            <label class="flex items-center space-x-2 text-sm">
		                                <input
		                                    type="checkbox"
		                                    :name="'excluded_sources[]'"
		                                    :value="source"
		                                    x-model="filters.excludedSources"
		                                    @change="triggerSearch()"
		                                    class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
		                                <span x-text="source" class="truncate"></span>
		                            </label>
		                        </template>
		                    </div>
		                </div>

		                <!-- Reset Filters Button -->
		                <button type="button" @click="resetFilters()" class="text-sm text-red-600 hover:text-red-800 transition-colors">
		                    <i class="fas fa-undo"></i> Reset All Filters
		                </button>
		            </div>

		            <div id="search-results" class="mt-4">
		            </div>
		            </div>
		        </div>
			</form>

			<div class="mt-4 sm:flex sm:items-center sm:-mx-2 border-t pt-4">
             <button type="button" @click="isMonstersOpen = false" class="w-full px-4 py-2 text-sm font-medium tracking-wide text-gray-700 capitalize transition-colors duration-300 transform border border-gray-200 rounded-md sm:w-1/2 sm:mx-2 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-gray-300 focus:ring-opacity-40">
                Cancel
             </button>

             <button hx-get={"/encounters/" + strconv.Itoa(encounter.ID)} hx-target="body" type="button" class="w-full px-4 py-2 mt-3 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-700 rounded-md sm:mt-0 sm:w-1/2 sm:mx-2 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                Save
             </button>
         </div>
        </div>
    </div>

    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('monsterSearchFilters', () => ({
                showFilters: false,
                filters: {
                    minLevel: '',
                    maxLevel: '',
                    excludedSizes: [],
                    excludedSources: []
                },
                commonSources: [
                    'Pathfinder Bestiary',
                    'Pathfinder Bestiary 2',
                    'Pathfinder Bestiary 3',
                    'Pathfinder Monster Core',
                    'Other'
                ],

                init() {
                    // Get encounter ID from data attribute
                    const encounterId = this.$el.dataset.encounterId;
                    this.storageKey = 'monsterSearchFilters_' + encounterId;

                    // Load filters from localStorage
                    const saved = localStorage.getItem(this.storageKey);
                    if (saved) {
                        try {
                            const parsed = JSON.parse(saved);
                            this.filters = { ...this.filters, ...parsed };
                        } catch (e) {
                            console.error('Failed to load saved filters:', e);
                        }
                    }
                },

                saveFilters() {
                    localStorage.setItem(this.storageKey, JSON.stringify(this.filters));
                },

                triggerSearch() {
                    this.saveFilters();
                    // Trigger the search input event
                    const searchInput = document.getElementById('search');
                    if (searchInput) {
                        searchInput.dispatchEvent(new Event('search'));
                    }
                },

                resetFilters() {
                    this.filters = {
                        minLevel: '',
                        maxLevel: '',
                        excludedSizes: [],
                        excludedSources: []
                    };
                    this.saveFilters();
                    this.triggerSearch();
                }
            }))
        });
    </script>
}

templ MonsterSearchResults(encounterID string, monsters []models.Monster, partyLevel float64) {
    <div id="monster-search-results">
        if len(monsters) == 0 {
            <p>No monsters found.</p>
        } else {
            for _, monster := range monsters {
                @MonsterListItem(encounterID, &monster, false)
            }
        }
    </div>
}

templ MonstersAdded(encounter models.Encounter) {
    <div id="monster-added-list">
        if len(encounter.Monsters) == 0 {
            <p>No monsters added so far.</p>
        } else {
            for _, monster := range encounter.Monsters {
                @MonsterListItem(strconv.Itoa(encounter.ID), monster, true)
            }
        }
    </div>
}

templ MonsterListItem(encounterID string, monster *models.Monster, isAdded bool) {
    <div class="flex justify-between w-full overflow-hidden bg-white rounded-md mb-2">
        <div class="flex items-center justify-center w-12 bg-red-900">
            <span class="text-white font-semibold">{strconv.Itoa(monster.GetLevel())}</span>
        </div>

        <div class="flex-1 px-4 py-2">
            <div>
                <span class="font-semibold uppercase text-xs text-gray-700">{monster.GetName()}</span>
                <p class="text-xs text-gray-400">{monster.Data.System.Details.Publication.Title}</p>
            </div>
        </div>

        if isAdded {
            <div id="right" class="ml-auto flex items-center pr-2">
                <button hx-post={"/encounters/" + encounterID + "/remove_monster/" + strconv.Itoa(monster.AssociationID)} hx-target="#monsters-added" class="text-4xl font-medium uppercase text-red-700 mt-1"><i class="fa-solid fa-square-minus"></i></button>
            </div>
        } else {
            <form class="flex justify-between"
                hx-post={"/encounters/" + encounterID + "/add_monster/" + strconv.Itoa(monster.ID)}
                hx-target="#monsters-added">

                <div class="flex py-2">
                    <input
                    type="number"
                    name="level_adjustment"
                    id="level_adjustment"
                    autocomplete="off"
                    value="0"
                    class="block w-8 mr-2 text-xs text-center text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                </div>

                <div id="right" class="ml-auto flex items-center pr-2">
                    <button type="submit" class="text-4xl font-medium uppercase text-green-700 mt-1">
                        <i class="fa-solid fa-square-plus"></i>
                    </button>
                </div>
            </form>
        }
    </div>
}
