package encounter

import (
    "strconv"

    "pf2.encounterbrew.com/cmd/web"
    "pf2.encounterbrew.com/internal/models"

    _ "github.com/a-h/templ"
)

templ EncounterShow(encounter models.Encounter) {
    @web.Base(encounter.Name) {
        <section class="max-w-4xl p-6 mx-auto">
            <div id="difficulty">
                @Difficulty(encounter)
            </div>
            <div id="combatants">
                @CombatantList(encounter)
            </div>
        </section>
        <section class="p-2 mx-auto bg-black flex justify-between fixed w-full bottom-0">
            <button hx-post={"/encounters/" + strconv.Itoa(encounter.ID) + "/prev_turn"} hx-target="body" class="text-4xl text-white ml-4"><i class="fa-solid fa-caret-left"></i></button>
            <button hx-post={"/encounters/" + strconv.Itoa(encounter.ID) + "/next_turn"} hx-target="body" class="text-4xl text-white mr-4"><i class="fa-solid fa-caret-right"></i></button>
        </section>
    }
}

templ CombatantList(encounter models.Encounter) {
    <div id="combatants-list">
        if len(encounter.Combatants) == 0 {
            <p>No combatants.</p>
        } else {
            for i, combatant := range encounter.Combatants {
                @Combatant(combatant, i, encounter)
            }
        }
    </div>
}

templ Combatant(combatant models.Combatant, index int, encounter models.Encounter) {
    <div x-data="{ isOpen: false }" class={ "flex justify-left w-full overflow-hidden rounded-md mb-2 bg-white border-solid border-2", setDefeated(combatant), isActive(index, encounter.Turn) }>
        <button @click="isOpen = true" class={ "flex items-center justify-center w-12", getColorClass(combatant) }>
            <span class="text-white font-semibold">{strconv.Itoa(combatant.GetInitiative())}</span>
        </button>

        @EditCombatantModal(combatant, index, encounter.ID)

        <div class="px-4 py-2 -mx-3">
            <div class="mx-3">
                <span class="font-semibold text-sm text-gray-700">{combatant.GetName()}</span>
                <p class="text-xs text-gray-400">
                    <span><i class="fa-regular fa-heart"></i> <b>{strconv.Itoa(combatant.GetHp())}</b>/{strconv.Itoa(combatant.GetMaxHp())}</span>
                    <span class="mx-2"><i class="fa-solid fa-shield-halved"></i> {strconv.Itoa(combatant.GetAc())}</span>
                </p>
            </div>
        </div>
    </div>
}

templ EditCombatantModal(combatant models.Combatant, index int, encounterID int) {
    <div x-show="isOpen"
        x-transition:enter="transition duration-300 ease-out"
        x-transition:enter-start="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave="transition duration-150 ease-in"
        x-transition:leave-start="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave-end="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        class="fixed inset-0 z-10 overflow-y-auto"
        aria-labelledby="modal-title" role="dialog" aria-modal="true"
    >

        <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="relative inline-block px-4 pt-5 pb-4 overflow-hidden text-left align-bottom transition-all transform border-solid border-2 bg-white rounded-md shadow-md sm:my-8 sm:w-full sm:max-w-sm sm:p-6 sm:align-middle">
                <h3 class="text-lg font-medium leading-6 text-gray-800 capitalize" id="modal-title">
                    Edit <b>{combatant.GetName()}</b>
                </h3>

                <form class="mt-4" hx-patch={"/encounters/" + strconv.Itoa(encounterID) + "/combatant/" + strconv.Itoa(index) + "/update"} hx-target="#combatants">

                    <div>
                        <label for="initiative" class="text-sm text-gray-700">
                            Initiative
                        </label>

                        <div class="block mt-3">
                            <input type="number" name="initiative" id="initiative" value={strconv.Itoa(combatant.GetInitiative())} class="block w-full px-4 py-3 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                        </div>
                    </div>

                    <div>
                        <label for="damage" class="text-sm text-gray-700">
                            Damage
                        </label>

                        <div class="block mt-3">
                            <input type="number" name="damage" id="damage" value="0" class="block w-full px-4 py-3 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                        </div>
                    </div>

                    <div class="mt-4 sm:flex sm:items-center sm:-mx-2">
                        <button type="button" @click="isOpen = false" class="w-full px-4 py-2 text-sm font-medium tracking-wide text-gray-700 capitalize transition-colors duration-300 transform border border-gray-200 rounded-md sm:w-1/2 sm:mx-2 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-gray-300 focus:ring-opacity-40">
                            Cancel
                        </button>

                        <button type="submit" class="w-full px-4 py-2 mt-3 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-700 rounded-md sm:mt-0 sm:w-1/2 sm:mx-2 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>

    </div>
}

templ Difficulty(encounter models.Encounter) {
    <div id="difficulty-box" class={ "flex mb-2 p-1 justify-center rounded-md", getDifficultyClass(encounter.GetDifficulty())}>
        <p class="text-xs">{ getDifficultyText(encounter.GetDifficulty()) } - Round {strconv.Itoa(encounter.Round + 1)} / Turn {strconv.Itoa(encounter.Turn + 1)}</p>
    </div>
}

func getColorClass(combatant models.Combatant) string {
    switch combatant.GetType() {
    case "player":
        return "bg-green-700"
    case "monster":
        return "bg-red-700"
    default:
        return "bg-gray-500"
    }
}

func setDefeated(combatant models.Combatant) string {
    if combatant.GetHp() <= 0 {
        return "opacity-50"
    }

    return ""
}

func getDifficultyClass(value int) string {
   	switch {
        case value == 0:
            return "bg-green-100 text-green-800"
        case value == 1:
            return "bg-blue-100 text-blue-800"
        case value == 2:
            return "bg-yellow-100 text-yellow-800"
        case value == 3:
            return "bg-orange-100 text-orange-800"
        case value == 4:
            return "bg-red-100 text-red-800"
    }

    return "bg-gray-100 text-gray-800"
}

func getDifficultyText(value int) string {
   	switch {
		case value == 0:
			return "Trivial (50 XP)"
		case value == 1:
			return "Low (60 XP)"
		case value == 2:
			return "Moderate (80 XP)"
		case value == 3:
			return "Severe (120 XP)"
		case value == 4:
			return "Extreme (160 XP)"
	}

	return "Unknown"
}

func isActive(index int, turn int) string {
    if index == turn {
        return "border-gray-600"
    } else {
        return "border-gray-100"
    }
}
