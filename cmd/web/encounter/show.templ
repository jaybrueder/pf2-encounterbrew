package encounter

import (
    "strconv"

    "pf2.encounterbrew.com/cmd/web"
    "pf2.encounterbrew.com/internal/models"

    _ "github.com/a-h/templ"
)

templ EncounterShow(encounter models.Encounter) {
    @web.Base(encounter.Name) {
        <section class="max-w-4xl px-2 mx-auto">
            <div id="difficulty">
                @Difficulty(encounter)
            </div>
            <div id="bulk-initiative" x-data="{ isInitiativeOpen: false }">
                @SetInitiative(encounter)
                @InitiativeModal(encounter)
            </div>
            <div id="combatants">
                @CombatantList(encounter)
            </div>
        </section>
        <section class="p-2 mx-auto bg-black flex justify-between fixed w-full bottom-0">
            <button hx-post={"/encounters/" + strconv.Itoa(encounter.ID) + "/prev_turn"} hx-target="body" class="text-4xl text-white ml-4"><i class="fa-solid fa-caret-left"></i></button>
            <button hx-get={"/encounters/" + strconv.Itoa(encounter.ID) + "/edit/"} hx-replace-url={"/encounters/" + strconv.Itoa(encounter.ID) + "/edit"} hx-target="body" class="text-xl text-white ml-4"><i class="fa-solid fa-pencil"></i></button>
            <button hx-post={"/encounters/" + strconv.Itoa(encounter.ID) + "/next_turn"} hx-target="body" class="text-4xl text-white mr-4"><i class="fa-solid fa-caret-right"></i></button>
        </section>
    }
}

templ CombatantList(encounter models.Encounter) {
    <div id="combatants-list">
        if len(encounter.Combatants) == 0 {
            <p>No combatants.</p>
        } else {
            for i, combatant := range encounter.Combatants {
                @CombatantListItem(combatant, i, encounter)
            }
        }
    </div>
}

templ CombatantListItem(combatant models.Combatant, index int, encounter models.Encounter) {
    <div x-data="{ isOpen: false, showStatblock: false }" class={ "flex-col justify-left w-full overflow-hidden rounded-md mb-2 bg-white border-solid border-2", setDefeated(combatant), isActive(index, encounter.Turn) }>
        <div class="flex">
            <button @click="isOpen = true" class={ "flex items-center justify-center w-12", getColorClass(combatant) }>
                <span class="text-white font-bold">{strconv.Itoa(combatant.GetInitiative())}</span>
            </button>

            @EditCombatantModal(combatant, index, encounter.ID)

            <div class="px-4 py-2 -mx-3">
                <div class="mx-3">
                    <button @click="showStatblock = !showStatblock" class="font-semibold text-sm text-gray-700 text-left uppercase">{combatant.GetName()}</button>
                    if combatant.IsMonster() {
                        <p class="text-xs text-gray-400">
                            <span><i class="fa-regular fa-heart"></i> <b>{strconv.Itoa(combatant.GetHp())}</b></span>
                            <span class="ml-2"><i class="fa-solid fa-shield-halved"></i> {strconv.Itoa(combatant.GetAc())}</span>
                            <span class="ml-6"><i class="fa-solid fa-hand-fist"></i> {plusMinus(combatant.GetFort())}</span>
                            <span class="ml-2"><i class="fa-solid fa-person-running"></i> {plusMinus(combatant.GetRef())}</span>
                            <span class="ml-2"><i class="fa-solid fa-brain"></i> {plusMinus(combatant.GetWill())}</span>
                        </p>
                    }
                    <div class="flex justify-left">
                        for _, condition := range combatant.GetConditions() {
                            @ConditionButton(&condition)
                        }
                    </div>
                </div>
            </div>
        </div>

        if combatant.GetType() == "monster" {
            @Statblock(combatant)
        }
    </div>
}

templ EditCombatantModal(combatant models.Combatant, index int, encounterID int) {
    <div x-show="isOpen"
        x-transition:enter="transition duration-300 ease-out"
        x-transition:enter-start="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave="transition duration-150 ease-in"
        x-transition:leave-start="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave-end="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        class="fixed inset-0 z-10 overflow-y-auto"
        aria-labelledby="modal-title" role="dialog" aria-modal="true"
    >

        <div class="flex items-end justify-center min-h-screen pb-20 text-center">
            <div class="relative inline-block px-4 pt-5 pb-4 overflow-hidden text-left align-bottom transition-all transform border-solid border-2 bg-white rounded-md shadow-md w-full">
                <h3 class="text-lg font-medium leading-6 text-gray-800 capitalize" id="modal-title">
                    Edit <b>{combatant.GetName()}</b>
                </h3>

                <form class="mt-4" hx-patch={"/encounters/" + strconv.Itoa(encounterID) + "/combatant/" + strconv.Itoa(index) + "/update"} hx-target="#combatants">

                    <div>
                        <label for="initiative" class="text-sm text-gray-700">
                            Initiative
                        </label>

                        <div class="block mt-1">
                            <input type="number" name="initiative" id="initiative" value={strconv.Itoa(combatant.GetInitiative())} class="block w-full px-4 py-3 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                        </div>
                    </div>

                    <div class="mt-2">
                        <label for="damage" class="text-sm text-gray-700">
                            Damage
                        </label>

                        <div class="block mt-1">
                            <input type="number" name="damage" id="damage" value="0" class="block w-full px-4 py-3 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                        </div>
                    </div>

                    <div class="mt-2">
                        <label for="conditions" class="text-sm text-gray-700 mb-2">
                            Conditions
                        </label>
                        <div id={"combatant-conditions-" + strconv.Itoa(index)}>
                            @CombatantConditions(strconv.Itoa(encounterID), index, combatant.GetConditions())
                        </div>
                    </div>

                    <div class="mt-4 sm:flex sm:items-center sm:-mx-2">
                        <button type="button" @click="isOpen = false" class="w-full px-4 py-2 text-sm font-medium tracking-wide text-gray-700 capitalize transition-colors duration-300 transform border border-gray-200 rounded-md sm:w-1/2 sm:mx-2 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-gray-300 focus:ring-opacity-40">
                            Cancel
                        </button>

                        <button type="submit" class="w-full px-4 py-2 mt-3 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-700 rounded-md sm:mt-0 sm:w-1/2 sm:mx-2 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>

    </div>
}

templ SetInitiative(encounter models.Encounter) {
    if encounter.Turn == 0 && encounter.Round == 0 {
        <div class="flex justify-center mb-2">
            <button @click="isInitiativeOpen = true" class="px-4 py-2 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-700 rounded-md hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                Set Initiative
            </button>
        </div>
    }
}

templ InitiativeModal(encounter models.Encounter) {
    <div x-show="isInitiativeOpen"
        x-transition:enter="transition duration-300 ease-out"
        x-transition:enter-start="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave="transition duration-150 ease-in"
        x-transition:leave-start="translate-y-0 opacity-100 sm:scale-100"
        x-transition:leave-end="translate-y-4 opacity-0 sm:translate-y-0 sm:scale-95"
        class="fixed inset-0 z-10 overflow-y-auto"
        aria-labelledby="modal-title" role="dialog" aria-modal="true"
    >
        <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="relative inline-block px-4 pt-5 pb-4 overflow-hidden text-left align-bottom transition-all transform border-solid border-2 bg-white rounded-md shadow-md sm:my-8 sm:w-full sm:max-w-sm sm:p-6 sm:align-middle">
                <h3 class="text-lg font-medium leading-6 text-gray-800 capitalize" id="modal-title">
                    Set <b>Initiative</b>
                </h3>

                <form class="mt-4" hx-patch={"/encounters/" + strconv.Itoa(encounter.ID) + "/bulk_update_initiative"} hx-target="#combatants">

                    for i, combatant := range encounter.Combatants {
                        <div class="flex items-center mb-2">
                            <input type="number" min="0" autocomplete="off" name={"initiative-" + strconv.Itoa(i)} id={"initiative-" + strconv.Itoa(i)} value={strconv.Itoa(combatant.GetInitiative())} class="px-4 py-3 mr-2 w-24 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                            <p>{combatant.GetName()}</p>
                        </div>
                    }

                    <div class="mt-4 sm:flex sm:items-center sm:-mx-2">
                        <button type="button" @click="isInitiativeOpen = false" class="w-full px-4 py-2 text-sm font-medium tracking-wide text-gray-700 capitalize transition-colors duration-300 transform border border-gray-200 rounded-md sm:w-1/2 sm:mx-2 hover:bg-gray-100 focus:outline-none focus:ring focus:ring-gray-300 focus:ring-opacity-40">
                            Cancel
                        </button>

                        <button type="submit" @click="isInitiativeOpen = false" class="w-full px-4 py-2 mt-3 text-sm font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-700 rounded-md sm:mt-0 sm:w-1/2 sm:mx-2 hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>

    </div>
}

templ Difficulty(encounter models.Encounter) {
    <div id="difficulty-box" class={ "flex mb-2 p-1 justify-center rounded-md", getDifficultyClass(encounter.GetDifficulty())}>
        <p class="text-xs">{ getDifficultyText(encounter.GetDifficulty()) } - Round {strconv.Itoa(encounter.Round + 1)} / Turn {strconv.Itoa(encounter.Turn + 1)}</p>
    </div>
}

templ Statblock(combatant models.Combatant) {
    <div x-show="showStatblock" class="statblock w-full p-2 text-sm">
        // Rarity, Size, Traits, Level
        <div class="mb-1">
            <span class="inline-flex items-center px-2 py-1 text-xs text-white bg-gray-900 ring-2 ring-inset ring-yellow-500 uppercase">Creature {strconv.Itoa(combatant.GetLevel())}</span>
            <span class="inline-flex items-center px-2 py-1 text-xs text-white bg-green-700 ring-2 ring-inset ring-yellow-500 uppercase">{combatant.GetSize()}</span>
            for _, trait := range combatant.GetTraits() {
                <span class="inline-flex items-center px-2 py-1 text-xs text-white bg-red-900 ring-2 ring-inset ring-yellow-500 uppercase mr-1 mb-1">{trait}</span>
            }
          </div>

        // Perception
        <div>
            <p><b>Perception</b> +{strconv.Itoa(combatant.GetPerceptionMod())}; <span>{combatant.GetPerceptionSenses()}</span></p>
        </div>

        // Languages
        if combatant.GetLanguages() != "" {
            <div>
                <p><b>Languages</b> {combatant.GetLanguages()}</p>
            </div>
        }

        // Skills
        <div>
            <p><b>Skills</b> {combatant.GetSkills()}{combatant.GetLores()}</p>
        </div>

        // Attribute Modifies
        <div>
            <p><b>Str</b> {plusMinus(combatant.GetStr())}, <b>Dex</b> {plusMinus(combatant.GetDex())}, <b>Con</b> {plusMinus(combatant.GetCon())}, <b>Int</b> {plusMinus(combatant.GetInt())}, <b>Wis</b> {plusMinus(combatant.GetWis())}, <b>Cha</b> {plusMinus(combatant.GetCha())}</p>
        </div>

        // Items
        if combatant.GetInventory() != "" {
            <div>
                <p><b>Items</b> {combatant.GetInventory()}</p>
            </div>
        }

        // Interaction Abilities
        // TODO

        <hr class="h-px my-1 border-gray-600">

        // -- Defenses

        // AC & Saving Throws
        <div>
            <p><b>AC</b> {strconv.Itoa(combatant.GetAc())}{combatant.GetAcDetails()}; <b>Fort</b> +{strconv.Itoa(combatant.GetFort())}, <b>Ref</b> +{strconv.Itoa(combatant.GetRef())}, <b>Will</b> +{strconv.Itoa(combatant.GetWill())}</p>
        </div>

        // HP, Immunities, Weknesses, Resistances
        <div>
            <p><b>HP</b> {strconv.Itoa(combatant.GetMaxHp())}
            if combatant.GetImmunities() != "" {
                ; <b>Immunities</b> {combatant.GetImmunities()}
            }
            if combatant.GetResistances() != "" {
                ; <b>Resistances</b> {combatant.GetResistances()}
            }
            if combatant.GetWeaknesses() != "" {
                ; <b>Weaknesses</b> {combatant.GetWeaknesses()}
            }
            </p>
        </div>

        // Automatic Abilities
        // TODO

        // Reactive Abilities
        // TODO

        // Defensive Abilities
        if len(combatant.GetDefensiveActions()) > 0 {
            <div>
                for _, action := range combatant.GetDefensiveActions() {
                    @Action(action)
                }
            </div>
        }

        <hr class="h-px my-1 border-gray-600">

        // -- Offensive

        // Speed
        <div>
            <p><b>Speed</b> {combatant.GetSpeed()}{combatant.GetOtherSpeeds()}</p>
        </div>

        // Melee / Ranged Attacks
        <div>
            for _, attack := range combatant.GetAttacks() {
                @Attack(attack, combatant.GetAdjustmentModifier())
            }
        </div>

        // Spells
        if len(combatant.GetSpells()) > 0 {
            <div>
                <p>
                <span>@SpellSchool(combatant.GetSpellSchool(), combatant.GetAdjustmentModifier())</span>
                @Spells(combatant.GetSpells())
                </p>
            </div>
        }

        // Offensive or Proactive Abilities
        if len(combatant.GetOffensiveActions()) > 0 {
            <div>
                for _, action := range combatant.GetOffensiveActions() {
                    @Action(action)
                }
            </div>
        }
    </div>
}

templ Attack(i models.Item, modifier int) {
    <p>
        <b>{i.GetWeaponType()}</b>
        if i.GetActionCost() != 0 {
            @ActionCost(strconv.Itoa(i.GetActionCost()))
        }
        {i.GetName()} +{strconv.Itoa(i.GetAttackValue(modifier))}{i.GetTraits()},
        if i.GetDamageValue(modifier) != "" {
            <b>Damage</b> {i.GetDamageValue(modifier)}
        }
        if i.GetDamageEffect() != "" {
            <b>Effect</b> {i.GetDamageEffect()}
        }
    </p>
}

templ Action(a map[string]string) {
    <p>
        <b>{a["name"]}</b>
        if a["actionCost"] != "0" {
            @ActionCost(a["actionCost"])
        }
        if a["actionType"] == "free" {
            @ActionCost("free")
        }
        if a["actionType"] == "reaction" {
            @ActionCost("reaction")
        }
        if a["traits"] != "" {
            ({a["traits"]})
        }
        {a["description"]}
    </p>
}

templ Spells(formattedSpells map[string]string) {
    <ul class="pl-2">
        for level, spells := range formattedSpells {
            <li class="mr-1">
                <b>{level}</b> <i>{spells}</i>
            </li>
        }
    </ul>
}

templ SpellSchool(i models.Item, modifier int) {
    <b>{i.GetName()}</b> DC {strconv.Itoa(i.GetSpellDC(modifier))}, attack +{strconv.Itoa(i.GetSpellAttackValue(modifier))}
}

templ ActionCost(cost string) {
    <img class="inline-flex mr-1" style="height:12px" src={"/assets/images/" + cost + "-action.webp"} />
}

templ CombatantConditions(encounterID string, combatantIndex int, conditions []models.Condition) {
    @ConditionsAdded(encounterID, combatantIndex, conditions)

    <div class="block mt-1">
        <input
        type="text"
        name="search_condition"
        id="search_condition"
        placeholder="Add new condition..."
        autocomplete="off"
        hx-post={"/encounters/" + encounterID + "/combatant/" + strconv.Itoa(combatantIndex) + "/search_conditions"}
        hx-trigger="input changed delay:500ms, search"
        hx-target={"#conditions-searched-" + strconv.Itoa(combatantIndex)}
        hx-swap="innerHTML"
        class="block w-full px-4 py-3 mb-2 text-sm text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
    </div>

    <div id={"conditions-searched-" + strconv.Itoa(combatantIndex)}>
    </div>
}

templ ConditionsAdded(encounterID string, combatantIndex int, conditions []models.Condition) {
    <div id={"conditions-added-" + strconv.Itoa(combatantIndex)}>
        if len(conditions) != 0 {
            for _, condition := range conditions {
                @ConditionAddedListItem(encounterID, combatantIndex, &condition)
            }
        }
    </div>
}

templ ConditionSearchResults(encounterID string, combatantIndex int, conditions []models.Condition) {
    <div id={"conditions-search-results-" + strconv.Itoa(combatantIndex)}>
        if len(conditions) == 0 {
            <p>No conditions found.</p>
        } else {
            for _, condition := range conditions {
                @ConditionSearchListItem(encounterID, combatantIndex, &condition)
            }
        }
    </div>
}

templ ConditionAddedListItem(encounterID string, combatantIndex int, condition *models.Condition) {
    <div class="flex justify-between w-full overflow-hidden bg-white rounded-md mb-2">
        <div class="flex">
            <p class="text-lg font-semibold text-gray-700">@ConditionName(condition)</p>
        </div>

        <div class="flex">
            <button
            hx-post={"/encounters/" + encounterID + "/combatant/" + strconv.Itoa(combatantIndex) + "/remove_condition/" + strconv.Itoa(condition.ID)}
            hx-target={"#combatant-conditions-" + strconv.Itoa(combatantIndex)}
            hx-swap="innerHTML"
            class="text-2xl font-medium uppercase text-red-900">
                <i class="fa-solid fa-square-minus"></i>
            </button>
        </div>
    </div>
}

templ ConditionSearchListItem(encounterID string, combatantIndex int, condition *models.Condition) {
    <div class="w-full overflow-hidden bg-white rounded-md mb-2">
        <form class="flex justify-between"
            hx-post={"/encounters/" + encounterID + "/combatant/" + strconv.Itoa(combatantIndex) + "/add_condition/" + strconv.Itoa(condition.ID)}
            hx-target={"#combatant-conditions-" + strconv.Itoa(combatantIndex)}
            hx-swap="innerHTML">

            <div class="flex">
                <p class="text-lg font-semibold text-gray-700">{condition.GetName()}</p>
            </div>

            if condition.IsValued() {
                <div class="flex">
                    <input
                    type="number"
                    name="condition_value"
                    id="condition_value"
                    autocomplete="off"
                    value="1"
                    class="block w-8 text-xs text-center text-gray-700 bg-white border border-gray-200 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40" />
                </div>
            }

            <div class="flex">
                <button
                type="submit"
                class="text-4xl font-medium uppercase text-green-700">
                    <i class="fa-solid fa-square-plus"></i>
                </button>
            </div>
        </form>
    </div>
}

templ ConditionName(condition *models.Condition) {
    <span>
        {condition.GetName()}
        if condition.GetValue() > 0 {
            {strconv.Itoa(condition.GetValue())}
        }
    </span>
}

templ ConditionButton(condition *models.Condition) {
    <div x-data="{ showTooltip: false }">
        <button
            @click="showTooltip = !showTooltip"
            @click.outside="showTooltip = false"
            class="px-2 py-1 mr-2 text-xs font-bold text-white bg-blue-700 rounded-md cursor-pointer relative">
            @ConditionName(condition)
        </button>

        <div
            x-show="showTooltip"
            x-transition
            class="absolute p-4 m-2 text-sm bg-gray-900 text-white font-normal text-left rounded-lg shadow-lg left-0"
            style="top: 4em; z-index: 1;">
                <p class="mb-1 font-bold">{condition.GetName()}</p>
                <p>{condition.GetDescription()}</p>
         </div>
    </div>
}

func getColorClass(combatant models.Combatant) string {
    switch combatant.GetType() {
    case "player":
        return "bg-green-700"
    case "monster":
        return "bg-red-900"
    default:
        return "bg-gray-500"
    }
}

func setDefeated(combatant models.Combatant) string {
    if combatant.GetHp() <= 0 {
        return "opacity-50"
    }

    return ""
}

func getDifficultyClass(value int) string {
   	switch {
        case value == 0:
            return "bg-green-100 text-green-800"
        case value == 1:
            return "bg-blue-100 text-blue-800"
        case value == 2:
            return "bg-yellow-100 text-yellow-800"
        case value == 3:
            return "bg-orange-100 text-orange-800"
        case value == 4:
            return "bg-red-100 text-red-800"
    }

    return "bg-gray-100 text-gray-800"
}

func getDifficultyText(value int) string {
   	switch {
		case value == 0:
			return "Trivial (50 XP)"
		case value == 1:
			return "Low (60 XP)"
		case value == 2:
			return "Moderate (80 XP)"
		case value == 3:
			return "Severe (120 XP)"
		case value == 4:
			return "Extreme (160 XP)"
	}

	return "Unknown"
}

func isActive(index int, turn int) string {
    if index == turn {
        return "border-yellow-500"
    } else {
        return "border-gray-100"
    }
}

func plusMinus(value int) string {
    if value <= 0 {
        return strconv.Itoa(value)
    } else {
        return "+" + strconv.Itoa(value)
    }
}
